{"version":3,"sources":["comps/Menu.jsx","comps/Display.jsx","comps/ButtonS.jsx","reducer.jsx","App.jsx","serviceWorker.js","store.jsx","index.jsx"],"names":["Menu","props","className","type","onChange","event","newValue","Number","currentTarget","value","setMaxValue","disabled","maxInputSwitch","maxData","invalidMaxValue","setStartValue","startInputSwitch","startData","invalidStartValue","Display","invalidDisplayValues","setSwitch","startDisplay","ButtonS","switch","onClick","setData","title","initialState","startValue","maxValue","upSwitch","resetSwitch","App","newStartValue","maximum","setState","saveState","setValue","state","stateToString","JSON","stringify","localStorage","setItem","restoreState","stringToState","getItem","parse","addValue","deleteValue","this","React","Component","AppContainer","connect","dispatch","setStartValueAC","Boolean","window","location","hostname","match","store","createStore","action","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4cdab1ab.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Menu =(props)=> {\r\n\r\n    let changeStartValue = (event) => {\r\n        let value = Number(event.currentTarget.value);\r\n        props.setStartValue(value);\r\n    };\r\n\r\n    let changeMaxValue = (event) => {\r\n        let newValue = Number(event.currentTarget.value);\r\n        props.setMaxValue(newValue);};\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <span className='button'>max value:</span>\r\n            <div>\r\n                <input type=\"number\"\r\n                       onChange={changeMaxValue}\r\n                       disabled={props.maxInputSwitch}\r\n                       value={props.maxData}\r\n                       className={props.invalidMaxValue}/>\r\n            </div>\r\n            <span className='button'>start value:</span>\r\n            <div>\r\n                <input type=\"number\"\r\n                       onChange={changeStartValue}\r\n                       disabled={props.startInputSwitch}\r\n                       // onClick={changeStartValue}\r\n                       value={props.startData}\r\n                       className={props.invalidStartValue} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Menu;","import React from 'react';\r\n\r\nconst Display = (props) => {\r\n\r\n    return (\r\n        <div className='text'>\r\n            <div className={props.invalidDisplayValues}>\r\n                {props.startData <=0 || props.maxData <=0 || props.startData >= props.maxData || props.maxData <= props.startData\r\n                    ? <span className='displayError'> incorrect values </span>\r\n                    : props.setSwitch\r\n                        ? <span> {props.startDisplay} </span>\r\n                        : <span> set values please</span>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Display;","import React from 'react';\r\n\r\nconst ButtonS = (props) => {\r\n\r\n    return (\r\n                <button className=\"button\" disabled={props.switch} onClick={props.setData}>\r\n                    {props.title}\r\n                </button>\r\n    );\r\n}\r\nexport default ButtonS;","export const SET_START_VALUE = 'SET_START_VALUE'\n\nlet initialState = {\n    startValue: 0,\n    maxValue: 5,\n    startInputSwitch: false,\n    maxInputSwitch: false,\n    setSwitch: false,\n    upSwitch: true,\n    resetSwitch: false,\n    invalidDisplayValues: false\n};\n\nexport const reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_START_VALUE: {\n            debugger\n            return {\n                ...state, startValue: action.newValue\n            }\n        }\n        default:\n            return state\n    }\n};\n\n\nexport const setStartValueAC = (newValue) => {\n    return {type: SET_START_VALUE, newValue}\n}","import React from 'react';\nimport './App.css';\nimport Menu from \"./comps/Menu\";\nimport Display from \"./comps/Display\";\nimport ButtonS from \"./comps/ButtonS\";\nimport {connect} from \"react-redux\";\nimport {INC_START_VALUE, setStartValueAC} from \"./reducer\";\n\nclass App extends React.Component {\n\n    constructor(props) {\n        // debugger\n        // console.log(props)\n        super(props);\n    }\n\n    newStartValue = 0;\n\n    setStartValue = (newValue) => {\n        debugger\n        this.props.setStartValue(newValue)\n\n        // this.setState({\n        //         startValue: minimum,\n        //         startInputSwitch: false,\n        //         setSwitch: false,\n        //         maxInputSwitch: false,\n        //         invalidDisplayValues: false,\n        //     },\n        //     () => {\n        //         if (this.props.startValue <= 0 || this.props.maxValue <= 0 || this.props.startValue >= this.props.maxValue) {\n        //             this.setState({\n        //                 startInputSwitch: true,\n        //                 setSwitch: true,\n        //             }, () => this.saveState())\n        //         } else {\n        //             this.saveState()\n        //         }\n        //     })\n    };\n\n    setMaxValue = (maximum) => {\n        this.setState({\n                maxValue: maximum,\n                setSwitch: false,\n                maxInputSwitch: false,\n                startInputSwitch: false,\n                invalidDisplayValues: false,\n            },\n            () => {\n                if (this.props.maxValue <= 0 || this.props.startValue <= 0 || this.props.maxValue <= this.props.startValue) {\n                    this.setState({\n                        maxInputSwitch: true,\n                        setSwitch: true\n                    }, () => this.saveState())\n                } else {\n                    this.saveState()\n                }\n            })\n    };\n\n\n    setValue = () => {\n        this.setState({\n            upSwitch: false,\n            resetSwitch: false,\n            setSwitch: true,\n            newStartValue: this.props.startValue\n        }, () => {\n            this.saveState()\n        })\n    };\n\n    componentDidMount() {\n        this.restoreState()\n    };\n\n    saveState = (state) => {\n        let stateToString = JSON.stringify(this.state);\n        localStorage.setItem('store', stateToString)\n    };\n\n    restoreState = () => {\n        let state = {}, stringToState = localStorage.getItem('store');\n        if (stringToState != null) {\n            state = JSON.parse(stringToState)\n        }\n        this.setState(state)\n    };\n\n    addValue = () => {\n\n        /* this.setState({\n                 invalidDisplayValues: false,\n                 newStartValue: Number(this.props.newStartValue) + 1,\n                 upSwitch: false,\n             },\n             () => {\n                 if (this.props.newStartValue >= this.props.maxValue) {\n                     this.setState({\n                             upSwitch: true,\n                             invalidDisplayValues: true,\n                         }\n                     )\n                 } else {\n                     this.saveState()\n                 }\n             })*/\n\n    };\n\n    deleteValue = () => {\n        this.setState({\n            startValue: 1,\n            maxValue: 3,\n            upSwitch: true,\n            startInputSwitch: false,\n            maxInputSwitch: false,\n            setSwitch: false,\n            newStartValue: this.props.startValue,\n            invalidDisplayValues: false\n        }, () => {\n            this.saveState()\n        });\n    };\n\n    render() {\n\n        let invalidMaxValue = this.props.maxInputSwitch ? 'maxError' : '';\n        let invalidStartValue = this.props.startInputSwitch ? 'startError' : '';\n        let invalidDisplayValues = this.props.invalidDisplayValues ? 'displayError' : '';\n\n        return (\n            <div className='wrapper'>\n                <div className='menu'>\n                    <Menu setStartValue={this.setStartValue}\n                          setMaxValue={this.setMaxValue}\n                          startData={this.props.startValue}\n                          maxData={this.props.maxValue}\n                          invalidMaxValue={invalidMaxValue}\n                          invalidStartValue={invalidStartValue}\n                          startInputSwitch={this.props.startInputSwitch}\n                          maxInputSwitch={this.props.maxInputSwitch}/>\n\n                    <ButtonS setData={this.setValue} title='SET'\n                             switch={this.props.setSwitch}/>\n                </div>\n                <div className='display'>\n\n                    <Display startDisplay={this.props.newStartValue}\n                             setSwitch={this.props.setSwitch}\n                             invalidDisplayValues={invalidDisplayValues}\n                             startData={this.props.startValue}\n                             maxData={this.props.maxValue}\n                    />\n\n                    <div className='displayButton'>\n                        <ButtonS setData={this.addValue} title='UP'\n                                 switch={this.props.upSwitch}/>\n\n                        <ButtonS setData={this.deleteValue} title='RESET'\n                                 switch={this.props.resetSwitch}\n                        />\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        startValue: state.startValue\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        setStartValue: (newValue) => {\n            debugger\n            dispatch(setStartValueAC(newValue))\n        }\n    }\n};\n\nconst AppContainer = connect(mapStateToProps, mapDispatchToProps)(App);\nexport default AppContainer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {createStore} from \"redux\";\nimport {reducer} from \"./reducer\";\n\nexport const store = createStore(reducer);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}