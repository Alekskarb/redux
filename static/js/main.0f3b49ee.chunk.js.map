{"version":3,"sources":["reducer.jsx","comps/Menu.jsx","comps/Display.jsx","comps/ButtonS.jsx","App.jsx","serviceWorker.js","store.jsx","index.jsx"],"names":["initialState","startValue","maxValue","newStartValue","startInputSwitch","maxInputSwitch","setSwitch","upSwitch","resetSwitch","isCounter","invalidDisplayValues","setStartValueAC","type","setMaxValueAC","MenuContainer","connect","state","dispatch","setStartValue","setMaxValue","props","invalidMaxValue","invalidStartValue","className","onChange","event","currentTarget","value","disabled","Number","DisplayContainer","ButtonS","switch","onClick","setData","title","App","minValue","setValue","setValues","saveState","stateToString","JSON","stringify","localStorage","setItem","restoreState","stringToState","getItem","parse","setState","addValue","up","upValue","deleteValue","reset","resetValues","this","React","Component","AppContainer","Boolean","window","location","hostname","match","store","createStore","action","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0f3b49ee.chunk.js","sourcesContent":["export const SET_START_VALUE = 'SET_START_VALUE';\nexport const SET_MAX_VALUE = 'SET_MAX_VALUE';\nexport const SET_VALUES = 'SET_VALUES';\nexport const UP_VALUE = 'UP_VALUE';\nexport const RESET_VALUES = 'RESET_VALUES';\n\nlet initialState = {\n    startValue: 0,\n    maxValue: 5,\n    newStartValue: 0,\n    startInputSwitch: false,\n    maxInputSwitch: false,\n    setSwitch: false,\n    upSwitch: true,\n    resetSwitch: false,\n    isCounter: false,\n    invalidDisplayValues: false,\n};\n\nexport const reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_START_VALUE:\n            if (action.startValue <= 0 || state.maxValue <= 0 || action.startValue >= state.maxValue)\n            {\n                return {\n                    ...state, startInputSwitch: true, setSwitch: true,\n                }\n            }\n            else\n            {\n                return {\n                    ...state, startValue: action.startValue, setSwitch: false, startInputSwitch: false,\n                    maxInputSwitch: false, invalidDisplayValues: false,\n                }\n            }\n\n            case SET_MAX_VALUE:\n\n            if (action.maxValue <= 0 || state.startValue <= 0 || action.maxValue <= state.startValue)\n            {\n                return {\n                    ...state, maxInputSwitch: true, setSwitch: true\n                }\n            }\n            else\n            {\n                return {\n                    ...state, maxValue: action.maxValue, setSwitch: false, startInputSwitch: false,\n                    maxInputSwitch: false, invalidDisplayValues: false,\n                }\n            }\n\n            case SET_VALUES:\n            return {\n                ...state, newStartValue: state.startValue, isCounter: true, upSwitch: true,\n                resetSwitch: true, setSwitch: true,\n            }\n        case UP_VALUE:\n            if (state.newStartValue >= state.maxValue) {\n              return  {\n                  upSwitch: true,\n                invalidDisplayValues: true,\n              }\n            } else {\n                return {\n                ...state, invalidDisplayValues: false,\n                newStartValue: Number(state.newStartValue) + 1,\n                upSwitch: false,}\n            }\n\n\n    }\n    return state\n    }\n\n\nexport const setStartValueAC = (startValue) => {\n\n    return {type: SET_START_VALUE, startValue}\n};\nexport const setMaxValueAC = (maxValue) => {\n    return {type: SET_MAX_VALUE, maxValue}\n};\nexport const setValuesAC = () => {\n    return {type: SET_VALUES}\n}\nexport const upValueAC = () => {\n    return {type: UP_VALUE}\n}\nexport const resetValuesAC = () => {\n    return {type: RESET_VALUES}\n};\n\n\n\n//     if (this.props.newStartValue >= this.props.maxValue) {\n//\n//\n//} else {\n//\n//     }\n\n\n\n","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {setMaxValueAC, setStartValueAC} from \"../reducer\";\r\n\r\nconst Menu =(props)=> {\r\n\r\n    let changeStartValue = (event) => {\r\n\r\n        let startValue = Number(event.currentTarget.value);\r\n        props.setStartValue(startValue);\r\n    };\r\n\r\n    let invalidMaxValue = props.maxInputSwitch ? 'maxError' : '';\r\n    let invalidStartValue = props.startInputSwitch ? 'startError' : '';\r\n\r\n    let changeMaxValue = (event) => {\r\n\r\n        let maxValue = +(event.currentTarget.value);\r\n        props.setMaxValue(maxValue);};\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <span className='button'>max value:</span>\r\n            <div>\r\n                <input type=\"number\"\r\n                       onChange={changeMaxValue}\r\n                       disabled={props.maxInputSwitch}\r\n                       value={props.maxValue}\r\n                       className={invalidMaxValue}/>\r\n            </div>\r\n            <span className='button'>start value:</span>\r\n            <div>\r\n                <input type=\"number\"\r\n                       onChange={changeStartValue}\r\n                       disabled={props.startInputSwitch}\r\n                       value={props.startValue}\r\n                       className={invalidStartValue} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        maxInputSwitch: state.maxInputSwitch,\r\n        startInputSwitch: state.startInputSwitch,\r\n        startValue: state.startValue,\r\n        maxValue: state.maxValue,\r\n    }\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setStartValue: (startValue) => {\r\n            dispatch(setStartValueAC(startValue))\r\n        },\r\n        setMaxValue: (maxValue) => {\r\n            dispatch(setMaxValueAC(maxValue))\r\n        },\r\n    };\r\n};\r\nexport const MenuContainer = connect(mapStateToProps, mapDispatchToProps)(Menu);\r\nexport default MenuContainer;","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\n\r\nconst Display = (props) => {\r\n\r\n    return (\r\n        <div className='text'>\r\n            <div className={props.invalidDisplayValues}>\r\n                {props.startValue <=0 || props.maxValue <=0 || props.startValue >= props.maxValue || props.maxValue <= props.startValue\r\n                    ? <span className='displayError'> incorrect values </span>\r\n                    : props.setSwitch\r\n                        ? <span> {props.newStartValue} </span>\r\n                        : <span> set values please</span>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        invalidDisplayValues: state.invalidDisplayValues,\r\n        startValue: state.startValue,\r\n        maxValue: state.maxValue,\r\n        setSwitch: state.setSwitch,\r\n        newStartValue: state.newStartValue,\r\n    }\r\n};\r\n\r\nconst DisplayContainer = connect(mapStateToProps, null)(Display);\r\nexport default DisplayContainer;\r\n","import React from 'react';\r\n\r\nconst ButtonS = (props) => {\r\n\r\n    return (\r\n                <button className=\"button\"\r\n                        disabled={props.switch}\r\n                        onClick={props.setData}>\r\n                    {props.title}\r\n                </button>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default ButtonS","import React from 'react';\nimport './App.css';\nimport Menu from \"./comps/Menu\";\nimport Display from \"./comps/Display\";\nimport ButtonS from \"./comps/ButtonS\";\nimport {connect} from \"react-redux\";\nimport {\n    setValuesAC,\n    resetValueAC,\n    upValueAC, setStartValueAC, setMaxValueAC, resetValuesAC\n} from \"./reducer\";\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    // newStartValue = 0;\n\n    setStartValue = (minValue) => {\n        // this.setState({\n        //         startValue: this.props.startValue,\n        //         setSwitch: false,\n        //         startInputSwitch: false,\n        //         maxInputSwitch: false,\n        //         invalidDisplayValues: false,\n        //     },\n        //     () => {\n        //         if (this.props.startValue <= 0 || this.props.maxValue <= 0\n        //             || this.props.startValue >= this.props.maxValue) {\n        //             this.setState({\n        //                 startInputSwitch: true,\n        //                 setSwitch: true,\n        //             }, () => this.saveState())\n        //         } else {\n        //             this.saveState()\n        //         }\n        //     });\n        this.props.setStartValue(minValue)\n    };\n\n    setMaxValue = (maxValue) => {\n\n        // this.setState({\n        //         maxValue: this.props.maxValue,\n        //         setSwitch: false,\n        //         startInputSwitch: false,\n        //         maxInputSwitch: false,\n        //         invalidDisplayValues: false,\n        //     },\n        //     () => {\n        //         if (this.props.maxValue <= 0 || this.props.startValue <= 0 || this.props.maxValue <= this.props.startValue) {\n        //             this.setState({\n        //                 maxInputSwitch: true,\n        //                 setSwitch: true\n        //             }, () => this.saveState())\n        //         } else {\n        //             this.saveState()\n        //         }\n        //     });\n        this.props.setMaxValue(maxValue)\n    };\n\n    setValue = () => {\n\n        // this.setState({\n        //     newStartValue: this.props.startValue,\n        //     upSwitch: this.props.upSwitch,\n        //     resetSwitch: this.props.resetSwitch,\n        //     setSwitch: this.props.setSwitch,\n        // }, () => {\n        //     this.saveState()\n        // });\n        this.props.setValues()\n    };\n\n    componentDidMount() {\n        this.restoreState()\n    };\n\n    saveState = (state) => {\n        let stateToString = JSON.stringify(this.state);\n        localStorage.setItem('store', stateToString)\n    };\n\n    restoreState = () => {\n        let state = {}, stringToState = localStorage.getItem('store');\n        if (stringToState != null) {\n            state = JSON.parse(stringToState)\n        }\n        this.setState(state)\n    };\n\n    addValue = (up) => {\n\n        // this.setState({\n        //         invalidDisplayValues: false,\n        //         newStartValue: Number(this.props.newStartValue) + 1,\n        //         upSwitch: false,\n        //     },\n        //     () => {\n        //         if (this.props.newStartValue >= this.props.maxValue) {\n        //             this.setState({\n        //                     upSwitch: true,\n        //                     invalidDisplayValues: true,\n        //                 }\n        //             )\n        //         } else {\n        //             this.saveState()\n        //         }\n        //     });\n        this.props.upValue(up)\n    };\n\n    deleteValue = (reset) => {\n        this.setState({\n            startValue: 1,\n            maxValue: 3,\n            upSwitch: true,\n            startInputSwitch: false,\n            maxInputSwitch: false,\n            setSwitch: false,\n            newStartValue: this.props.startValue,\n            invalidDisplayValues: false\n        }, () => {\n            this.saveState()\n        });\n        this.props.resetValues(reset)\n    };\n\n    render() {\n        let invalidDisplayValues = this.props.invalidDisplayValues ? 'displayError' : '';\n        return (\n            <div className='wrapper'>\n               {this.props.isCounter ?  <div className='display'>\n\n                   <Display\n                       // invalidDisplayValues={invalidDisplayValues}\n                       // startDisplay={this.props.newStartValue}\n                       // setSwitch={this.props.setSwitch}\n                       // startData={this.props.startValue}\n                       // maxData={this.props.maxValue}\n                   />\n\n                   <div className='displayButton'>\n                       <ButtonS setData={this.addValue}\n                                title='UP'\n                                switch={this.props.upSwitch}/>\n\n                       <ButtonS setData={this.deleteValue}\n                                title='RESET'\n                                switch={this.props.resetSwitch}\n                       />\n                   </div>\n               </div>\n               : <div className='menu'>\n                       <Menu // invalidMaxValue={invalidMaxValue}\n                           // invalidStartValue={invalidStartValue}\n                           // startData={this.props.startValue}\n                           // maxData={this.props.maxValue}\n                           // setStartValue={this.setStartValue}\n                           // setMaxValue={this.setMaxValue}\n                           // startInputSwitch={this.props.startInputSwitch}\n                           // maxInputSwitch={this.props.maxInputSwitch}\n                       />\n\n                       <ButtonS setData={this.setValue} title='SET'\n                                switch={this.props.setSwitch}/>\n                   </div>\n               }\n\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        startValue: state.startValue,\n        maxValue: state.maxValue,\n        isCounter: state.isCounter,\n        setSwitch: state.setSwitch,\n        resetSwitch: state.resetSwitch,\n        upSwitch: state.upSwitch,\n        invalidDisplayValues: state.invalidDisplayValues,\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n\n        setStartValue: (minValue) => {\n            dispatch(setStartValueAC(minValue))\n        },\n        setMaxValue: (maxValue) => {\n            dispatch(setMaxValueAC(maxValue))\n        },\n        setValues: () => {\n            dispatch(setValuesAC())\n        },\n        upValue: () => {\n            dispatch(upValueAC())\n        },\n        resetValues: () => {\n            dispatch(resetValuesAC())\n        },\n    }\n};\n\n\nconst AppContainer = connect(mapStateToProps, mapDispatchToProps)(App);\nexport default AppContainer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {createStore} from \"redux\";\nimport {reducer} from \"./reducer\";\n\nexport const store = createStore(reducer);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}