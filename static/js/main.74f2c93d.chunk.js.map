{"version":3,"sources":["comps/Menu.jsx","comps/Display.jsx","comps/ButtonS.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Menu","props","className","type","onChange","event","newValue","currentTarget","value","setMaxValue","disabled","maxInputSwitch","maxData","invalidMaxValue","Number","setStartValue","startInputSwitch","startData","invalidStartValue","Display","invalidDisplayValues","setSwitch","startDisplay","ButtonS","switch","onClick","setData","title","App","newStartValue","minimum","setState","startValue","state","maxValue","saveState","maximum","setValue","upSwitch","resetSwitch","stateToString","JSON","stringify","localStorage","setItem","restoreState","stringToState","getItem","parse","addValue","deleteValue","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.74f2c93d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Menu =(props)=> {\r\n\r\n    let changeStartValue = (event) => {\r\n        let value = Number(event.currentTarget.value);\r\n        props.setStartValue(value);};\r\n\r\n    let changeMaxValue = (event) => {\r\n        let newValue = event.currentTarget.value;\r\n        props.setMaxValue(newValue);};\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <span className='button'>max value:</span>\r\n            <div>\r\n                <input type=\"number\"\r\n                       onChange={changeMaxValue}\r\n                       disabled={props.maxInputSwitch}\r\n                       value={props.maxData}\r\n                       className={props.invalidMaxValue}/>\r\n            </div>\r\n            <span className='button'>start value:</span>\r\n            <div>\r\n                <input type=\"number\"\r\n                       onChange={changeStartValue}\r\n                       disabled={props.startInputSwitch}\r\n                       // onClick={changeStartValue}\r\n                       value={props.startData}\r\n                       className={props.invalidStartValue} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Menu;","import React from 'react';\r\n\r\nconst Display = (props) => {\r\n\r\n    return (\r\n        <div className='text'>\r\n            <div className={props.invalidDisplayValues}>\r\n                {props.startData <=0 || props.maxData <=0 || props.startData >= props.maxData || props.maxData <= props.startData\r\n                    ? <span className='displayError'> incorrect values </span>\r\n                    : props.setSwitch\r\n                        ? <span> {props.startDisplay} </span>\r\n                        : <span> set values please</span>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Display;","import React from 'react';\r\n\r\nconst ButtonS = (props) => {\r\n\r\n    return (\r\n                <button className=\"button\" disabled={props.switch} onClick={props.setData}>\r\n                    {props.title}\r\n                </button>\r\n    );\r\n}\r\nexport default ButtonS;","import React from 'react';\nimport './App.css';\nimport Menu from \"./comps/Menu\";\nimport Display from \"./comps/Display\";\nimport ButtonS from \"./comps/ButtonS\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            startValue: 0,\n            maxValue: 5,\n            startInputSwitch: false,\n            maxInputSwitch: false,\n            setSwitch: false,\n            upSwitch: true,\n            resetSwitch: false,\n            invalidDisplayValues: false\n        };\n    }\n\n    newStartValue = 0;\n\n    setStartValue = (minimum) => {\n        this.setState({\n                startValue: minimum,\n                startInputSwitch: false,\n                setSwitch: false,\n                maxInputSwitch: false,\n                invalidDisplayValues: false,\n            },\n            () => {\n                if (this.state.startValue <= 0 || this.state.maxValue <= 0 || this.state.startValue >= this.state.maxValue) {\n                    this.setState({\n                        startInputSwitch: true,\n                        setSwitch: true,\n                    }, () => this.saveState())\n                } else {this.saveState()\n                }\n            })\n    }\n\n    setMaxValue = (maximum) => {\n        this.setState({\n                maxValue: maximum,\n                setSwitch: false,\n                maxInputSwitch: false,\n                startInputSwitch: false,\n                invalidDisplayValues: false,\n            },\n            () => {\n                if (this.state.maxValue <= 0 || this.state.startValue <= 0 || this.state.maxValue <= this.state.startValue ) {\n                    this.setState({\n                        maxInputSwitch: true,\n                        setSwitch: true\n                        },()=> this.saveState())\n                } else {this.saveState()\n                }\n            })\n    };\n\n\nsetValue = () => {\n    this.setState({\n        upSwitch: false,\n        resetSwitch: false,\n        setSwitch: true,\n        newStartValue: this.state.startValue\n    }, () => {\n        this.saveState()\n    })\n};\n\ncomponentDidMount()\n{this.restoreState()};\n\nsaveState = (state) => {\n    let stateToString = JSON.stringify(this.state);\n    localStorage.setItem('store', stateToString)\n}\n\nrestoreState = () => {\n    let state = {}, stringToState = localStorage.getItem('store');\n    if (stringToState != null) {\n        state = JSON.parse(stringToState)\n    }\n    this.setState(state)\n}\n\naddValue = (newStartValue) => {\n        this.setState({\n            invalidDisplayValues: false,\n            newStartValue: Number(this.state.newStartValue) + 1,\n            upSwitch: false,\n        },\n            ()=> {\n            if (this.state.newStartValue >= this.state.maxValue)\n            {this.setState({\n                upSwitch: true,\n                invalidDisplayValues: true,\n            }\n            )} else {\n                    this.saveState()\n                }\n        })\n}\n\ndeleteValue = () => {\n    this.setState({\n        startValue: 1,\n        maxValue: 3,\n        upSwitch: true,\n        startInputSwitch: false,\n        maxInputSwitch: false,\n        setSwitch: false,\n        newStartValue: this.state.startValue,\n        invalidDisplayValues: false\n    }, () => {\n        this.saveState()\n    });\n};\n\nrender() {\n    let invalidMaxValue = this.state.maxInputSwitch ? 'maxError' : '';\n    let invalidStartValue = this.state.startInputSwitch ? 'startError' : '';\n    let invalidDisplayValues = this.state.invalidDisplayValues ? 'displayError' : '';\n    return (\n        <div className='wrapper'>\n            <div className='menu'>\n                <Menu setStartValue={this.setStartValue}\n                      setMaxValue={this.setMaxValue}\n                      startData={this.state.startValue}\n                      maxData={this.state.maxValue}\n                      invalidMaxValue={invalidMaxValue}\n                      invalidStartValue={invalidStartValue}\n                      startInputSwitch={this.state.startInputSwitch}\n                      maxInputSwitch={this.state.maxInputSwitch}/>\n\n                <ButtonS setData={this.setValue} title='SET'\n                         switch={this.state.setSwitch}/>\n            </div>\n            <div className='display'>\n\n                <Display startDisplay={this.state.newStartValue}\n                         setSwitch={this.state.setSwitch}\n                         invalidDisplayValues={invalidDisplayValues}\n                         startData={this.state.startValue}\n                         maxData={this.state.maxValue}\n                />\n\n                <div className='displayButton'>\n                    <ButtonS setData={this.addValue} title='UP'\n                             switch={this.state.upSwitch}/>\n\n                    <ButtonS setData={this.deleteValue} title='RESET'\n                             switch={this.state.resetSwitch}\n                    />\n                </div>\n            </div>\n        </div>\n    )\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render\n(<App/>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}